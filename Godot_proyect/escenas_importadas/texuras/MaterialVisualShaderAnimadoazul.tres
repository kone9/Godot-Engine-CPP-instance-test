[gd_resource type="VisualShader" load_steps=11 format=2]

[ext_resource path="res://escenas_importadas/texuras/C++Prueba_MaterialC++_Albedo.png" type="Texture" id=1]

[sub_resource type="VisualShaderNodeColorConstant" id=1]
output_port_for_preview = 0
constant = Color( 0, 0.29336, 1, 1 )

[sub_resource type="VisualShaderNodeColorOp" id=2]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeScalarConstant" id=3]
constant = 50.0

[sub_resource type="VisualShaderNodeScalarOp" id=4]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeTexture" id=5]
output_port_for_preview = 0
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeInput" id=6]
output_port_for_preview = 0
input_name = "time"

[sub_resource type="VisualShaderNodeScalarFunc" id=7]
function = 1

[sub_resource type="VisualShaderNodeScalarOp" id=8]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.5 ]

[sub_resource type="VisualShaderNodeInput" id=9]
input_name = "uv"

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform sampler2D tex_frg_4;



void vertex() {
// Output:0

}

void fragment() {
// Input:9
	vec3 n_out9p0 = vec3(UV, 0.0);

// Texture:4
	vec4 tex_frg_4_read = texture(tex_frg_4, n_out9p0.xy);
	vec3 n_out4p0 = tex_frg_4_read.rgb;
	float n_out4p1 = tex_frg_4_read.a;

// Input:5
	float n_out5p0 = TIME;

// ScalarFunc:7
	float n_out7p0 = cos(n_out5p0);

// ScalarOp:3
	float n_out3p0 = dot(n_out4p0, vec3(0.333333, 0.333333, 0.333333)) + n_out7p0;

// Color:11
	vec3 n_out11p0 = vec3(0.000000, 0.293360, 1.000000);
	float n_out11p1 = 1.000000;

// ColorOp:12
	vec3 n_out12p0 = vec3(1.0) - (vec3(1.0) - vec3(n_out3p0)) * (vec3(1.0) - n_out11p0);

// Output:0
	ALBEDO = n_out12p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -1209.87, 293.2 )
nodes/fragment/0/position = Vector2( 520, 120 )
nodes/fragment/3/node = SubResource( 4 )
nodes/fragment/3/position = Vector2( -60, 160 )
nodes/fragment/4/node = SubResource( 5 )
nodes/fragment/4/position = Vector2( -280, -20 )
nodes/fragment/5/node = SubResource( 6 )
nodes/fragment/5/position = Vector2( -800, 320 )
nodes/fragment/7/node = SubResource( 7 )
nodes/fragment/7/position = Vector2( -540, 320 )
nodes/fragment/8/node = SubResource( 8 )
nodes/fragment/8/position = Vector2( -260, 300 )
nodes/fragment/9/node = SubResource( 9 )
nodes/fragment/9/position = Vector2( -600, 80 )
nodes/fragment/11/node = SubResource( 1 )
nodes/fragment/11/position = Vector2( 160, 360 )
nodes/fragment/12/node = SubResource( 2 )
nodes/fragment/12/position = Vector2( 340, 200 )
nodes/fragment/13/node = SubResource( 3 )
nodes/fragment/13/position = Vector2( -600, 200 )
nodes/fragment/connections = PoolIntArray( 4, 0, 3, 0, 5, 0, 7, 0, 11, 0, 12, 1, 9, 0, 4, 0, 12, 0, 0, 0, 7, 0, 3, 1, 3, 0, 12, 0 )
